---
- include_vars: "../vars/main.yml"

- name: Search for the latest Ubuntu 16.04 AMI
  ec2_ami_find:
    region: "{{ vpc_region }}"
    name: "{{ ami_name }}"
    owner: "{{ ami_owner }}"
    sort: name
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: ami_find_result

- name: Create EC2 Instance(s)
  with_items: "{{ subnets }}"
  ec2:
    region: "{{ vpc_region }}"
    group: "{{ ec2_security_group_name }}"
    keypair: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ami_find_result.results[0].ami_id }}"
    vpc_subnet_id: "{{ item.vpc_pvt_subnet }}"
    assign_public_ip: yes
    wait: True
    wait_timeout: 600
    instance_tags:
      Name: "cassandra-instance"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "{{ SERVER_ROLE }}"
    exact_count: 1
    count_tag:
      Name: "cassandra-instance"
      AZ: "{{ item.zone }}"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "{{ SERVER_ROLE }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
        delete_on_termination: yes
        #count: "{{ ec2_count | default(1) }}"
    #  with_indexed_items: "{{ ec2_subnet_id }}"
  register: ec2

  #- set_fact:
  #  instances_ids: "{{ ec2.instance_ids }}"

- name: Add the newly created EC2 instance(s) to the local host group (located at ./inventory/hosts)
  lineinfile:
    dest: "./inventory/hosts"
    regexp: "{{ item }}"
    insertafter: '[cassandra]'
    line: "{{ item }}"
    state: present
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}"

- name: Wait for SSH to come up on EC2 Instance(s)
  wait_for:
    host: "{{ item }}" 
    port: 22 
    delay: 10
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}"
